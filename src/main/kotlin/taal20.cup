package nl.jrdie.taal20._parser;
//
import java_cup.runtime.*;
import nl.jrdie.taal20.ast.*;
import java.util.ArrayList;
import java.util.List;

parser code {:
    public boolean syntaxErrors;

    public void syntax_error(Symbol current_token) {
        report_error(
            "Syntax error at line " + (current_token.left+1) + ", column "
            + current_token.right + " (Token: " + Taal20SymbolType.terminalNames[current_token.sym] + ")\n", null
        );
    }

:};

//parser code  {:
//  public void report_error(String message, Object info) {
//    StringBuilder m = new StringBuilder("Error ");
//
//    if (info instanceof java_cup.runtime.Symbol)
//      m.append( "("+info.toString()+")" );
//
//    m.append(" : "+message);
//
//    System.out.println(m);
//  }
//
//  public void report_fatal_error(String message, Object info) {
//    report_error(message, info);
//    throw new RuntimeException("Fatal Syntax Error");
//  }
//:};

terminal RBRACE, LBRACE;
terminal NEWLINE, SPACE, TAB;
terminal EQEQ, NOTEQ;
terminal LT, GT;
terminal EQ;

terminal PLUS, MIN, TIMES, SLASH, PERCENT;

terminal ZOLANG;
terminal ALS, ANDERS;
terminal GEBRUIK;

terminal Integer INT;

terminal KLEUROOG;
terminal ZWOOG;
terminal KOMPAS;
terminal String VARNAME;

terminal STAP_VOORUIT;
terminal STAP_ACHTERUIT;
terminal DRAAI_LINKS;
terminal DRAAI_RECHTS;

nonterminal IAlsStatement AlsStatement;
//nonterminal AlsAndersStatement AlsAndersStatement;
//nonterminal AlsStatement AlsStatement;
nonterminal EmptyStatement;
nonterminal EqualityExpression EqualityExpression;
nonterminal Expressie Expressie;
nonterminal ProgrammaStatement FullStatement;
nonterminal GebruikStatement GebruikStatement;
nonterminal InitConstantType GebruikStatementType;
nonterminal InitBlok InitBlok;
nonterminal InitStatement InitStatement;
nonterminal InitStatement InitStatementType;
nonterminal ArrayList<InitStatement> InitStatements;
nonterminal ArrayList<InitStatement> InitStatementsOpt;
nonterminal CalcExpressie MathExpression;
nonterminal OpdrachtStatement OpdrachtStatement;
nonterminal ProgrammaBlok ProgrammaBlok;
nonterminal ProgrammaStatement Statement;
nonterminal ProgrammaStatement StatementType;
nonterminal List<ProgrammaStatement> Statements;
nonterminal List<ProgrammaStatement> StatementsOpt;
nonterminal ToekenningStatement ToekenningStatement;
nonterminal EqualityExpression Vergelijking;
nonterminal ZolangStatement ZolangStatement;

nonterminal space_or_tab;
nonterminal wit;
nonterminal wit_recursive;
nonterminal wit_recursive_opt;
nonterminal wit_or_newline;
nonterminal wit_or_newline_recursive;
nonterminal wit_or_newline_recursive_opt;

nonterminal Programma programma;
nonterminal Programma goal;

precedence nonassoc NEWLINE, SPACE, TAB;
precedence left PLUS, MIN, TIMES, SLASH, PERCENT;
precedence nonassoc EQEQ, NOTEQ, LT, GT;
precedence left LBRACE, RBRACE;
precedence nonassoc ANDERS;


start with goal;

space_or_tab ::= SPACE | TAB;
wit ::= space_or_tab | wit space_or_tab;
wit_recursive ::= wit | wit_recursive wit;
wit_recursive_opt ::= wit_recursive | ;
wit_or_newline ::= wit | NEWLINE;
wit_or_newline_recursive ::= wit_or_newline | wit_or_newline_recursive wit_or_newline;
wit_or_newline_recursive_opt ::= wit_or_newline_recursive | ;

goal ::= programma:p {: RESULT = p; :};

programma ::= InitBlok:ib ProgrammaBlok:pb {: System.out.println("Parse successful."); RESULT = new Programma(ib, pb); :};

InitBlok ::= InitStatementsOpt:s {: RESULT = new InitBlok(s); :};

InitStatementsOpt ::= InitStatements:sl {: RESULT = sl; :}
                    | {: RESULT = new ArrayList<InitStatement>(); :}
                    ;

InitStatements ::= InitStatement:s NEWLINE {: RESULT = new ArrayList<InitStatement>(); RESULT.add(s); :}
                 | InitStatements:sl InitStatement:s NEWLINE {: sl.add(s); RESULT = sl; :}
                 ;

//InitStatement ::= wit_or_newline_recursive_opt InitStatementType wit_recursive;
InitStatement ::= wit_or_newline_recursive_opt InitStatementType:s wit_recursive_opt {: RESULT = s; :};

InitStatementType ::= GebruikStatement:s {: RESULT = s; :};

GebruikStatementType ::= VARNAME:n {: RESULT = new Taal20VarName(n); :}
                       | ZWOOG {: RESULT = ZwOogConstant.INSTANCE; :}
                       | KLEUROOG {: RESULT = KleurOogConstant.INSTANCE;; :}
                       | KOMPAS {: RESULT = KompasConstant.INSTANCE; :}
                       ;

GebruikStatement ::= GEBRUIK wit GebruikStatementType:t wit_recursive_opt {: RESULT = new GebruikStatement(t); :};


//programmaBlok_opt ::= programmaBlok | ;

ProgrammaBlok ::= StatementsOpt:sl {: RESULT = new ProgrammaBlok(sl); :};

StatementsOpt ::= Statements:sl {: RESULT = sl; :}
                | {: RESULT = new ArrayList<ProgrammaStatement>(); :}
                ;

Statements ::= Statement:s NEWLINE {: RESULT = new ArrayList<ProgrammaStatement>(); RESULT.add(s); :}
             | Statements:sl Statement:s NEWLINE {: sl.add(s); RESULT = sl; :}
             ;

Statement ::= EmptyStatement | FullStatement:s {: RESULT = s ; :};

EmptyStatement ::= wit_or_newline_recursive_opt;

FullStatement ::= wit_or_newline_recursive_opt StatementType:s wit_recursive_opt  {: RESULT = s; :};

StatementType ::= ZolangStatement:s {: RESULT = s; :}
                | ToekenningStatement:s {: RESULT = s; :}
                | OpdrachtStatement:s {: RESULT = s; :}
                | AlsStatement:s {: RESULT = s; :}
                ;

ToekenningStatement ::= VARNAME:n wit EQ wit Expressie:e {: RESULT = new ToekenningStatement(new Taal20VarName(n), e); :};


Expressie ::= INT:i {: RESULT = new NumberExpressie(new Taal20Int(i)); :}
            | VARNAME:n {: RESULT = new VarNameExpressie(new Taal20VarName(n)); :}
            | MathExpression:e {: RESULT = e; :}
            | KLEUROOG {: RESULT = KleurOogExpressie.INSTANCE; :}
            | ZWOOG {: RESULT = ZwOogExpressie.INSTANCE; :}
            | KOMPAS {: RESULT = KompasExpressie.INSTANCE; :}
            ;

//ExpressieCalc ::= Expressie wit ExpressieCalcOperation wit Expressie;

//ExpressieCalcOperation ::= PLUS | MIN | TIMES | SLASH | PERCENT;

ZolangStatement ::= ZOLANG wit Vergelijking:v wit LBRACE wit_recursive_opt NEWLINE ProgrammaBlok:pb wit_recursive_opt RBRACE {: RESULT = new ZolangStatement(v, pb); :};

MathExpression ::= Expressie:l wit PLUS wit Expressie:r {: RESULT = new CalcExpressie(l, CalcExpressieType.PLUS, r); :}
                 | Expressie:l wit MIN wit Expressie:r {: RESULT = new CalcExpressie(l, CalcExpressieType.MIN, r); :}
                 | Expressie:l wit TIMES wit Expressie:r {: RESULT = new CalcExpressie(l, CalcExpressieType.TIMES, r); :}
                 | Expressie:l wit SLASH wit Expressie:r {: RESULT = new CalcExpressie(l, CalcExpressieType.SLASH, r); :}
                 | Expressie:l wit PERCENT wit Expressie:r {: RESULT = new CalcExpressie(l, CalcExpressieType.PERCENT, r); :};

Vergelijking ::= EqualityExpression:e {: RESULT = e; :};

EqualityExpression ::= Expressie:l wit LT wit Expressie:r {: RESULT = new EqualityExpression(l, VergelijkingType.LT, r); :}
                     | Expressie:l wit GT wit Expressie:r {: RESULT = new EqualityExpression(l, VergelijkingType.GT, r); :}
                     | Expressie:l wit EQEQ wit Expressie:r {: RESULT = new EqualityExpression(l, VergelijkingType.EQEQ, r); :}
                     | Expressie:l wit NOTEQ wit Expressie:r {: RESULT = new EqualityExpression(l, VergelijkingType.NOTEQ, r); :};

AlsStatement ::= ALS wit Vergelijking:v wit LBRACE wit_recursive_opt NEWLINE ProgrammaBlok:als wit_recursive_opt RBRACE {: RESULT = new AlsStatement(v, als); :}
              | ALS wit Vergelijking:v wit LBRACE wit_recursive_opt NEWLINE ProgrammaBlok:als wit_recursive_opt RBRACE wit ANDERS wit LBRACE wit_recursive_opt NEWLINE ProgrammaBlok:anders wit_recursive_opt RBRACE {: RESULT = new AlsAndersStatement(v, als, anders); :};

OpdrachtStatement ::= STAP_VOORUIT {: RESULT = new OpdrachtStatement(OpdrachtType.STAP_VOORUIT); :}
                    | STAP_ACHTERUIT {: RESULT = new OpdrachtStatement(OpdrachtType.STAP_ACHTERUIT); :}
                    | DRAAI_LINKS {: RESULT = new OpdrachtStatement(OpdrachtType.DRAAI_LINKS); :}
                    | DRAAI_RECHTS {: RESULT = new OpdrachtStatement(OpdrachtType.DRAAI_RECHTS); :};
