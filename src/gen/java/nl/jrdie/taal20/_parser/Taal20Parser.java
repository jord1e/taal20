
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package nl.jrdie.taal20._parser;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Taal20Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Taal20SymbolType.class;
}

  /** Default constructor. */
  @Deprecated
  public Taal20Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Taal20Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Taal20Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\031\003\000\002\031" +
    "\003\000\002\032\003\000\002\032\004\000\002\033\003" +
    "\000\002\033\004\000\002\034\003\000\002\034\002\000" +
    "\002\035\003\000\002\035\003\000\002\036\003\000\002" +
    "\036\004\000\002\037\003\000\002\037\002\000\002\041" +
    "\003\000\002\040\004\000\002\012\003\000\002\016\003" +
    "\000\002\016\002\000\002\015\004\000\002\015\005\000" +
    "\002\013\003\000\002\014\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\010" +
    "\006\000\002\021\003\000\002\025\003\000\002\025\002" +
    "\000\002\024\004\000\002\024\005\000\002\022\003\000" +
    "\002\022\003\000\002\004\003\000\002\007\005\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\026\007\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\030\014\000\002" +
    "\027\003\000\002\017\007\000\002\017\007\000\002\017" +
    "\007\000\002\017\007\000\002\017\007\000\002\005\007" +
    "\000\002\005\007\000\002\005\007\000\002\005\007\000" +
    "\002\003\014\000\002\002\025\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\032\002\uffee\004\uffee\005\uffee\006\uffee\023" +
    "\uffee\024\uffee\026\006\033\uffee\034\uffee\035\uffee\036\uffee" +
    "\037\uffee\001\002\000\004\002\ufff2\001\002\000\032\002" +
    "\uffef\004\uffef\005\uffef\006\uffef\023\uffef\024\uffef\026\006" +
    "\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\001\002\000" +
    "\006\005\031\006\032\001\002\000\004\004\166\001\002" +
    "\000\004\004\uffeb\001\002\000\004\004\uffea\001\002\000" +
    "\030\002\uffe2\004\033\005\031\006\032\023\ufff3\024\ufff3" +
    "\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\001\002\000" +
    "\004\002\015\001\002\000\030\002\ufff0\004\ufff0\005\ufff0" +
    "\006\ufff0\023\ufff0\024\ufff0\033\ufff0\034\ufff0\035\ufff0\036" +
    "\ufff0\037\ufff0\001\002\000\004\002\001\001\002\000\022" +
    "\004\uffdd\023\053\024\042\033\046\034\055\035\050\036" +
    "\051\037\047\001\002\000\070\004\ufffe\005\ufffe\006\ufffe" +
    "\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015" +
    "\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe" +
    "\024\ufffe\025\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033" +
    "\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\001\002\000\026" +
    "\004\ufff6\005\ufff6\006\ufff6\023\ufff6\024\ufff6\033\ufff6\034" +
    "\ufff6\035\ufff6\036\ufff6\037\ufff6\001\002\000\004\004\uffdf" +
    "\001\002\000\026\004\ufff8\005\031\006\032\023\ufff8\024" +
    "\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\001\002" +
    "\000\012\002\uffe4\005\uffe4\006\uffe4\007\uffe4\001\002\000" +
    "\032\002\uffe3\004\033\005\031\006\032\007\uffe3\023\ufff3" +
    "\024\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\001" +
    "\002\000\004\004\uffde\001\002\000\004\002\ufff1\001\002" +
    "\000\026\004\033\005\031\006\032\023\ufff4\024\ufff4\033" +
    "\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\001\002\000\004" +
    "\004\034\001\002\000\070\004\000\005\000\006\000\007" +
    "\000\010\000\011\000\012\000\013\000\014\000\015\000" +
    "\016\000\017\000\020\000\021\000\022\000\023\000\024" +
    "\000\025\000\027\000\030\000\031\000\032\000\033\000" +
    "\034\000\035\000\036\000\037\000\001\002\000\070\004" +
    "\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff" +
    "\013\uffff\014\uffff\015\uffff\016\uffff\017\uffff\020\uffff\021" +
    "\uffff\022\uffff\023\uffff\024\uffff\025\uffff\027\uffff\030\uffff" +
    "\031\uffff\032\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037" +
    "\uffff\001\002\000\026\004\ufff7\005\ufff7\006\ufff7\023\ufff7" +
    "\024\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\001" +
    "\002\000\032\002\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1" +
    "\023\uffe1\024\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037" +
    "\uffe1\001\002\000\026\004\ufff5\005\ufff5\006\ufff5\023\ufff5" +
    "\024\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\001" +
    "\002\000\004\004\037\001\002\000\032\002\uffe0\004\uffe0" +
    "\005\uffe0\006\uffe0\007\uffe0\023\uffe0\024\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\001\002\000\070\004\ufffd" +
    "\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013" +
    "\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd" +
    "\022\ufffd\023\ufffd\024\ufffd\025\ufffd\027\ufffd\030\ufffd\031" +
    "\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd" +
    "\001\002\000\010\004\uffdb\005\uffdb\006\uffdb\001\002\000" +
    "\006\005\031\006\032\001\002\000\010\004\uffd9\005\uffd9" +
    "\006\uffd9\001\002\000\010\004\uffda\005\uffda\006\uffda\001" +
    "\002\000\010\004\ufff9\005\031\006\032\001\002\000\006" +
    "\005\031\006\032\001\002\000\010\004\uffbf\005\uffbf\006" +
    "\uffbf\001\002\000\010\004\uffc1\005\uffc1\006\uffc1\001\002" +
    "\000\010\004\uffc0\005\uffc0\006\uffc0\001\002\000\010\004" +
    "\uffd8\005\uffd8\006\uffd8\001\002\000\006\005\031\006\032" +
    "\001\002\000\010\004\uffd7\005\uffd7\006\uffd7\001\002\000" +
    "\010\004\uffc2\005\uffc2\006\uffc2\001\002\000\020\005\031" +
    "\006\032\027\057\030\067\031\060\032\061\033\063\001" +
    "\002\000\010\004\uffd5\005\uffd5\006\uffd5\001\002\000\010" +
    "\004\uffd1\005\uffd1\006\uffd1\001\002\000\010\004\uffd0\005" +
    "\uffd0\006\uffd0\001\002\000\010\004\uffd3\005\uffd3\006\uffd3" +
    "\001\002\000\010\004\uffd4\005\uffd4\006\uffd4\001\002\000" +
    "\006\005\031\006\032\001\002\000\006\005\031\006\032" +
    "\001\002\000\006\005\uffce\006\uffce\001\002\000\010\004" +
    "\uffd2\005\uffd2\006\uffd2\001\002\000\010\005\031\006\032" +
    "\010\071\001\002\000\010\004\ufff9\005\031\006\032\001" +
    "\002\000\012\004\ufffc\005\031\006\032\007\ufffc\001\002" +
    "\000\004\004\076\001\002\000\012\004\ufffa\005\031\006" +
    "\032\007\ufffa\001\002\000\012\004\ufffb\005\031\006\032" +
    "\007\ufffb\001\002\000\030\004\033\005\031\006\032\007" +
    "\uffe2\023\ufff3\024\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3" +
    "\037\ufff3\001\002\000\010\005\031\006\032\007\ufff9\001" +
    "\002\000\004\007\101\001\002\000\010\004\uffcf\005\uffcf" +
    "\006\uffcf\001\002\000\030\005\031\006\032\011\104\012" +
    "\106\013\112\014\110\016\107\017\113\020\111\021\103" +
    "\022\105\001\002\000\006\005\031\006\032\001\002\000" +
    "\006\005\031\006\032\001\002\000\006\005\031\006\032" +
    "\001\002\000\006\005\031\006\032\001\002\000\006\005" +
    "\031\006\032\001\002\000\006\005\031\006\032\001\002" +
    "\000\006\005\031\006\032\001\002\000\006\005\031\006" +
    "\032\001\002\000\006\005\031\006\032\001\002\000\020" +
    "\005\031\006\032\027\057\030\067\031\060\032\061\033" +
    "\063\001\002\000\010\004\uffcc\005\uffcc\006\uffcc\001\002" +
    "\000\020\005\031\006\032\016\107\017\113\020\111\021" +
    "\103\022\105\001\002\000\020\005\031\006\032\027\057" +
    "\030\067\031\060\032\061\033\063\001\002\000\006\005" +
    "\uffc8\006\uffc8\001\002\000\020\005\031\006\032\027\057" +
    "\030\067\031\060\032\061\033\063\001\002\000\010\004" +
    "\uffcb\005\uffcb\006\uffcb\001\002\000\020\005\031\006\032" +
    "\027\057\030\067\031\060\032\061\033\063\001\002\000" +
    "\006\005\uffc7\006\uffc7\001\002\000\020\005\031\006\032" +
    "\027\057\030\067\031\060\032\061\033\063\001\002\000" +
    "\010\004\uffcd\005\uffcd\006\uffcd\001\002\000\020\005\031" +
    "\006\032\027\057\030\067\031\060\032\061\033\063\001" +
    "\002\000\006\005\uffc5\006\uffc5\001\002\000\020\005\031" +
    "\006\032\027\057\030\067\031\060\032\061\033\063\001" +
    "\002\000\010\004\uffc9\005\uffc9\006\uffc9\001\002\000\020" +
    "\005\031\006\032\027\057\030\067\031\060\032\061\033" +
    "\063\001\002\000\006\005\uffc6\006\uffc6\001\002\000\020" +
    "\005\031\006\032\027\057\030\067\031\060\032\061\033" +
    "\063\001\002\000\010\004\uffca\005\uffca\006\uffca\001\002" +
    "\000\010\005\031\006\032\015\140\001\002\000\006\005" +
    "\031\006\032\001\002\000\020\005\031\006\032\027\057" +
    "\030\067\031\060\032\061\033\063\001\002\000\010\004" +
    "\uffd6\005\031\006\032\001\002\000\004\004\uffdc\001\002" +
    "\000\020\005\031\006\032\027\057\030\067\031\060\032" +
    "\061\033\063\001\002\000\006\005\031\006\032\001\002" +
    "\000\010\005\031\006\032\010\147\001\002\000\010\004" +
    "\ufff9\005\031\006\032\001\002\000\004\004\151\001\002" +
    "\000\030\004\033\005\031\006\032\007\uffe2\023\ufff3\024" +
    "\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\001\002" +
    "\000\010\005\031\006\032\007\ufff9\001\002\000\004\007" +
    "\154\001\002\000\010\004\uffc4\005\uffc4\006\uffc4\001\002" +
    "\000\010\005\031\006\032\025\156\001\002\000\006\005" +
    "\031\006\032\001\002\000\010\005\031\006\032\010\160" +
    "\001\002\000\010\004\ufff9\005\031\006\032\001\002\000" +
    "\004\004\162\001\002\000\030\004\033\005\031\006\032" +
    "\007\uffe2\023\ufff3\024\ufff3\033\ufff3\034\ufff3\035\ufff3\036" +
    "\ufff3\037\ufff3\001\002\000\010\005\031\006\032\007\ufff9" +
    "\001\002\000\004\007\165\001\002\000\010\004\uffc3\005" +
    "\uffc3\006\uffc3\001\002\000\032\002\uffed\004\uffed\005\uffed" +
    "\006\uffed\023\uffed\024\uffed\026\uffed\033\uffed\034\uffed\035" +
    "\uffed\036\uffed\037\uffed\001\002\000\016\005\031\006\032" +
    "\030\174\031\171\032\172\033\173\001\002\000\010\004" +
    "\ufff9\005\031\006\032\001\002\000\010\004\uffe8\005\uffe8" +
    "\006\uffe8\001\002\000\010\004\uffe6\005\uffe6\006\uffe6\001" +
    "\002\000\010\004\uffe9\005\uffe9\006\uffe9\001\002\000\010" +
    "\004\uffe7\005\uffe7\006\uffe7\001\002\000\004\004\uffe5\001" +
    "\002\000\004\004\177\001\002\000\032\002\uffec\004\uffec" +
    "\005\uffec\006\uffec\023\uffec\024\uffec\026\uffec\033\uffec\034" +
    "\uffec\035\uffec\036\uffec\037\uffec\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\022\010\010\012\011\013\006\014\007\015" +
    "\004\016\013\040\003\041\012\001\001\000\002\001\001" +
    "\000\010\010\010\013\175\014\007\001\001\000\006\031" +
    "\016\032\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\004\020\007\024\021\025\022" +
    "\027\024\023\025\022\031\016\032\021\035\017\036\026" +
    "\037\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\002\051\003\042\020\053\023\044" +
    "\026\043\030\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\037\001\001\000\002" +
    "\001\001\000\022\004\020\007\024\022\035\031\016\032" +
    "\021\035\017\036\026\037\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\031\016\032\021\035\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\016\032\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\031\016\032\071\033\073" +
    "\034\142\001\001\000\006\031\016\032\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\016\032\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\065\006\063\017\061" +
    "\027\064\031\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\016\032\101\001\001\000\006\031\016\032" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\037\001\001\000\012\031\016\032\071\033\073\034" +
    "\072\001\001\000\004\031\037\001\001\000\002\001\001" +
    "\000\006\031\016\032\074\001\001\000\004\031\037\001" +
    "\001\000\030\004\020\007\024\021\076\022\027\024\023" +
    "\025\022\031\016\032\021\035\017\036\026\037\015\001" +
    "\001\000\012\031\016\032\071\033\073\034\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\037\001" +
    "\001\000\006\031\016\032\134\001\001\000\006\031\016" +
    "\032\132\001\001\000\006\031\016\032\130\001\001\000" +
    "\006\031\016\032\126\001\001\000\006\031\016\032\124" +
    "\001\001\000\006\031\016\032\122\001\001\000\006\031" +
    "\016\032\120\001\001\000\006\031\016\032\116\001\001" +
    "\000\006\031\016\032\113\001\001\000\010\006\114\017" +
    "\061\031\037\001\001\000\006\031\016\032\115\001\001" +
    "\000\004\031\037\001\001\000\010\006\117\017\061\031" +
    "\037\001\001\000\006\031\016\032\115\001\001\000\010" +
    "\006\121\017\061\031\037\001\001\000\006\031\016\032" +
    "\115\001\001\000\010\006\123\017\061\031\037\001\001" +
    "\000\006\031\016\032\115\001\001\000\010\006\125\017" +
    "\061\031\037\001\001\000\006\031\016\032\115\001\001" +
    "\000\010\006\127\017\061\031\037\001\001\000\006\031" +
    "\016\032\115\001\001\000\010\006\131\017\061\031\037" +
    "\001\001\000\006\031\016\032\115\001\001\000\010\006" +
    "\133\017\061\031\037\001\001\000\006\031\016\032\115" +
    "\001\001\000\010\006\135\017\061\031\037\001\001\000" +
    "\006\031\016\032\115\001\001\000\004\031\037\001\001" +
    "\000\006\031\016\032\140\001\001\000\010\006\141\017" +
    "\061\031\037\001\001\000\006\031\016\032\115\001\001" +
    "\000\002\001\001\000\014\005\065\006\063\017\061\027" +
    "\144\031\037\001\001\000\006\031\016\032\145\001\001" +
    "\000\004\031\037\001\001\000\012\031\016\032\071\033" +
    "\073\034\147\001\001\000\002\001\001\000\030\004\020" +
    "\007\024\021\151\022\027\024\023\025\022\031\016\032" +
    "\021\035\017\036\026\037\015\001\001\000\012\031\016" +
    "\032\071\033\073\034\152\001\001\000\002\001\001\000" +
    "\006\031\016\032\154\001\001\000\004\031\037\001\001" +
    "\000\006\031\016\032\156\001\001\000\004\031\037\001" +
    "\001\000\012\031\016\032\071\033\073\034\160\001\001" +
    "\000\002\001\001\000\030\004\020\007\024\021\162\022" +
    "\027\024\023\025\022\031\016\032\021\035\017\036\026" +
    "\037\015\001\001\000\012\031\016\032\071\033\073\034" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\167\031\037\001\001\000\012\031" +
    "\016\032\071\033\073\034\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Taal20Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Taal20Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Taal20Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public boolean syntaxErrors;

    public void syntax_error(Symbol current_token) {
        report_error(
            "Syntax error at line " + (current_token.left+1) + ", column "
            + current_token.right + " (Token: " + Taal20SymbolType.terminalNames[current_token.sym] + ")\n", null
        );
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Taal20Parser$actions {
  private final Taal20Parser parser;

  /** Constructor */
  CUP$Taal20Parser$actions(Taal20Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Taal20Parser$do_action_part00000000(
    int                        CUP$Taal20Parser$act_num,
    java_cup.runtime.lr_parser CUP$Taal20Parser$parser,
    java.util.Stack            CUP$Taal20Parser$stack,
    int                        CUP$Taal20Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Taal20Parser$result;

      /* select the action based on the action number */
      switch (CUP$Taal20Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)).value;
		RESULT = start_val;
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Taal20Parser$parser.done_parsing();
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // space_or_tab ::= SPACE 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("space_or_tab",23, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // space_or_tab ::= TAB 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("space_or_tab",23, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // wit ::= space_or_tab 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("wit",24, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // wit ::= wit space_or_tab 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("wit",24, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // wit_recursive ::= wit 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("wit_recursive",25, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // wit_recursive ::= wit_recursive wit 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("wit_recursive",25, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // wit_recursive_opt ::= wit_recursive 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("wit_recursive_opt",26, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // wit_recursive_opt ::= 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("wit_recursive_opt",26, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // wit_or_newline ::= wit 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("wit_or_newline",27, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // wit_or_newline ::= NEWLINE 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("wit_or_newline",27, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // wit_or_newline_recursive ::= wit_or_newline 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("wit_or_newline_recursive",28, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // wit_or_newline_recursive ::= wit_or_newline_recursive wit_or_newline 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("wit_or_newline_recursive",28, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // wit_or_newline_recursive_opt ::= wit_or_newline_recursive 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("wit_or_newline_recursive_opt",29, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // wit_or_newline_recursive_opt ::= 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("wit_or_newline_recursive_opt",29, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // goal ::= programma 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("goal",31, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // programma ::= InitBlok ProgrammaBlok 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("programma",30, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // InitBlok ::= InitStatementsOpt 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("InitBlok",8, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // InitStatementsOpt ::= InitStatements 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("InitStatementsOpt",12, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // InitStatementsOpt ::= 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("InitStatementsOpt",12, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // InitStatements ::= InitStatement NEWLINE 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("InitStatements",11, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // InitStatements ::= InitStatements InitStatement NEWLINE 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("InitStatements",11, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // InitStatement ::= InitStatementType 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("InitStatement",9, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // InitStatementType ::= GebruikStatement 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("InitStatementType",10, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // GebruikStatementType ::= VARNAME 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("GebruikStatementType",7, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // GebruikStatementType ::= ZWOOG 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("GebruikStatementType",7, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // GebruikStatementType ::= KLEUROOG 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("GebruikStatementType",7, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // GebruikStatementType ::= KOMPAS 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("GebruikStatementType",7, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // GebruikStatement ::= GEBRUIK wit GebruikStatementType wit_recursive_opt 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("GebruikStatement",6, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ProgrammaBlok ::= StatementsOpt 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("ProgrammaBlok",15, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // StatementsOpt ::= Statements 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("StatementsOpt",19, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // StatementsOpt ::= 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("StatementsOpt",19, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Statements ::= Statement NEWLINE 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("Statements",18, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Statements ::= Statements Statement NEWLINE 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("Statements",18, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Statement ::= EmptyStatement 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("Statement",16, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Statement ::= FullStatement 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("Statement",16, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EmptyStatement ::= wit_or_newline_recursive_opt 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("EmptyStatement",2, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FullStatement ::= wit_or_newline_recursive_opt StatementType wit_recursive_opt 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("FullStatement",5, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // StatementType ::= ZolangStatement 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("StatementType",17, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // StatementType ::= Toekenning 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("StatementType",17, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // StatementType ::= AlsStatement 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("StatementType",17, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // StatementType ::= AlsAndersStatement 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("StatementType",17, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // StatementType ::= OpdrachtStatement 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("StatementType",17, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Toekenning ::= VARNAME wit EQ wit Expressie 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("Toekenning",20, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expressie ::= INT 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("Expressie",4, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expressie ::= VARNAME 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("Expressie",4, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expressie ::= MathExpression 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("Expressie",4, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expressie ::= KLEUROOG 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("Expressie",4, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expressie ::= ZWOOG 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("Expressie",4, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expressie ::= KOMPAS 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("Expressie",4, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ZolangStatement ::= ZOLANG wit Vergelijking wit LBRACE wit_recursive_opt NEWLINE ProgrammaBlok wit_recursive_opt RBRACE 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("ZolangStatement",22, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Vergelijking ::= EqualityExpression 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("Vergelijking",21, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MathExpression ::= Expressie wit PLUS wit Expressie 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("MathExpression",13, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MathExpression ::= Expressie wit MIN wit Expressie 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("MathExpression",13, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // MathExpression ::= Expressie wit TIMES wit Expressie 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("MathExpression",13, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // MathExpression ::= Expressie wit SLASH wit Expressie 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("MathExpression",13, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MathExpression ::= Expressie wit PERCENT wit Expressie 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("MathExpression",13, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EqualityExpression ::= Expressie wit LT wit Expressie 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",3, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EqualityExpression ::= Expressie wit GT wit Expressie 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",3, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EqualityExpression ::= Expressie wit EQEQ wit Expressie 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",3, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EqualityExpression ::= Expressie wit NOTEQ wit Expressie 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",3, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // AlsStatement ::= ALS wit Vergelijking wit LBRACE wit_recursive_opt NEWLINE ProgrammaBlok wit_recursive_opt RBRACE 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("AlsStatement",1, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // AlsAndersStatement ::= ALS wit Vergelijking wit LBRACE wit_recursive_opt NEWLINE ProgrammaBlok wit_recursive_opt RBRACE wit ANDERS wit LBRACE wit_recursive_opt NEWLINE ProgrammaBlok wit_recursive_opt RBRACE 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("AlsAndersStatement",0, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-18)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OpdrachtStatement ::= STAP_VOORUIT 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("OpdrachtStatement",14, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OpdrachtStatement ::= STAP_ACHTERUIT 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("OpdrachtStatement",14, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OpdrachtStatement ::= DRAAI_LINKS 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("OpdrachtStatement",14, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OpdrachtStatement ::= DRAAI_RECHTS 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("OpdrachtStatement",14, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Taal20Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Taal20Parser$do_action(
    int                        CUP$Taal20Parser$act_num,
    java_cup.runtime.lr_parser CUP$Taal20Parser$parser,
    java.util.Stack            CUP$Taal20Parser$stack,
    int                        CUP$Taal20Parser$top)
    throws java.lang.Exception
    {
              return CUP$Taal20Parser$do_action_part00000000(
                               CUP$Taal20Parser$act_num,
                               CUP$Taal20Parser$parser,
                               CUP$Taal20Parser$stack,
                               CUP$Taal20Parser$top);
    }
}

}
