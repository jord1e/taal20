
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package nl.jrdie.taal20._parser;

import java_cup.runtime.*;
import nl.jrdie.taal20.ast.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Taal20Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Taal20SymbolType.class;
}

  /** Default constructor. */
  @Deprecated
  public Taal20Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Taal20Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Taal20Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\030\003\000\002\030" +
    "\003\000\002\031\003\000\002\031\004\000\002\032\003" +
    "\000\002\032\004\000\002\033\003\000\002\033\002\000" +
    "\002\034\003\000\002\034\003\000\002\035\003\000\002" +
    "\035\004\000\002\036\003\000\002\036\002\000\002\040" +
    "\003\000\002\037\004\000\002\011\003\000\002\015\003" +
    "\000\002\015\002\000\002\014\004\000\002\014\005\000" +
    "\002\012\005\000\002\013\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\007" +
    "\006\000\002\020\003\000\002\024\003\000\002\024\002" +
    "\000\002\023\004\000\002\023\005\000\002\021\003\000" +
    "\002\021\003\000\002\003\003\000\002\006\005\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\025\007\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\027\014\000\002\016\007\000\002" +
    "\016\007\000\002\016\007\000\002\016\007\000\002\016" +
    "\007\000\002\026\003\000\002\004\007\000\002\004\007" +
    "\000\002\004\007\000\002\004\007\000\002\002\014\000" +
    "\002\002\025\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\032\002\uffee\006\021\007\014\010\015\023" +
    "\uffee\024\uffee\026\ufff3\033\uffee\034\uffee\035\uffee\036\uffee" +
    "\037\uffee\001\002\000\004\026\167\001\002\000\072\004" +
    "\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe" +
    "\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021" +
    "\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe" +
    "\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036" +
    "\ufffe\037\ufffe\001\002\000\004\002\ufff2\001\002\000\030" +
    "\006\ufff6\007\ufff6\010\ufff6\023\ufff6\024\ufff6\026\ufff6\033" +
    "\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\001\002\000\030" +
    "\006\ufff8\007\014\010\015\023\ufff8\024\ufff8\026\ufff8\033" +
    "\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\001\002\000\032" +
    "\002\uffef\006\021\007\014\010\015\023\uffef\024\uffef\026" +
    "\ufff3\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\001\002" +
    "\000\030\006\021\007\014\010\015\023\ufff4\024\ufff4\026" +
    "\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\001\002" +
    "\000\004\006\162\001\002\000\072\004\000\005\000\006" +
    "\000\007\000\010\000\011\000\012\000\013\000\014\000" +
    "\015\000\016\000\017\000\020\000\021\000\022\000\023" +
    "\000\024\000\025\000\026\000\027\000\030\000\031\000" +
    "\032\000\033\000\034\000\035\000\036\000\037\000\001" +
    "\002\000\072\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff" +
    "\011\uffff\012\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017" +
    "\uffff\020\uffff\021\uffff\022\uffff\023\uffff\024\uffff\025\uffff" +
    "\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff\034" +
    "\uffff\035\uffff\036\uffff\037\uffff\001\002\000\030\002\uffe2" +
    "\006\021\007\014\010\015\023\ufff3\024\ufff3\033\ufff3\034" +
    "\ufff3\035\ufff3\036\ufff3\037\ufff3\001\002\000\004\002\022" +
    "\001\002\000\030\002\ufff0\006\ufff0\007\ufff0\010\ufff0\023" +
    "\ufff0\024\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0" +
    "\001\002\000\030\006\ufff7\007\ufff7\010\ufff7\023\ufff7\024" +
    "\ufff7\026\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7" +
    "\001\002\000\004\002\001\001\002\000\022\006\uffdd\023" +
    "\045\024\036\033\041\034\047\035\043\036\044\037\042" +
    "\001\002\000\004\006\uffdf\001\002\000\012\002\uffe4\004" +
    "\uffe4\007\uffe4\010\uffe4\001\002\000\032\002\uffe3\004\uffe3" +
    "\006\021\007\014\010\015\023\ufff3\024\ufff3\033\ufff3\034" +
    "\ufff3\035\ufff3\036\ufff3\037\ufff3\001\002\000\004\006\uffde" +
    "\001\002\000\004\002\ufff1\001\002\000\004\006\032\001" +
    "\002\000\032\002\uffe1\004\uffe1\006\uffe1\007\uffe1\010\uffe1" +
    "\023\uffe1\024\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037" +
    "\uffe1\001\002\000\004\006\034\001\002\000\032\002\uffe0" +
    "\004\uffe0\006\uffe0\007\uffe0\010\uffe0\023\uffe0\024\uffe0\033" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\001\002\000\010" +
    "\006\uffdb\007\uffdb\010\uffdb\001\002\000\006\007\014\010" +
    "\015\001\002\000\010\006\uffd8\007\uffd8\010\uffd8\001\002" +
    "\000\010\006\ufff9\007\014\010\015\001\002\000\006\007" +
    "\014\010\015\001\002\000\010\006\uffc0\007\uffc0\010\uffc0" +
    "\001\002\000\010\006\uffc2\007\uffc2\010\uffc2\001\002\000" +
    "\010\006\uffc1\007\uffc1\010\uffc1\001\002\000\006\007\014" +
    "\010\015\001\002\000\010\006\uffd9\007\uffd9\010\uffd9\001" +
    "\002\000\010\006\uffc3\007\uffc3\010\uffc3\001\002\000\010" +
    "\006\uffda\007\uffda\010\uffda\001\002\000\020\007\014\010" +
    "\015\027\053\030\063\031\052\032\055\033\057\001\002" +
    "\000\010\006\uffd2\007\uffd2\010\uffd2\001\002\000\010\006" +
    "\uffd6\007\uffd6\010\uffd6\001\002\000\072\004\ufffd\005\ufffd" +
    "\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014" +
    "\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd" +
    "\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031" +
    "\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd" +
    "\001\002\000\010\006\uffd1\007\uffd1\010\uffd1\001\002\000" +
    "\010\006\uffd4\007\uffd4\010\uffd4\001\002\000\010\006\uffd5" +
    "\007\uffd5\010\uffd5\001\002\000\006\007\014\010\015\001" +
    "\002\000\006\007\014\010\015\001\002\000\006\007\uffca" +
    "\010\uffca\001\002\000\010\006\uffd3\007\uffd3\010\uffd3\001" +
    "\002\000\010\005\065\007\014\010\015\001\002\000\010" +
    "\006\ufff9\007\014\010\015\001\002\000\012\004\ufffc\006" +
    "\ufffc\007\014\010\015\001\002\000\004\006\072\001\002" +
    "\000\012\004\ufffa\006\ufffa\007\014\010\015\001\002\000" +
    "\012\004\ufffb\006\ufffb\007\014\010\015\001\002\000\030" +
    "\004\uffe2\006\021\007\014\010\015\023\ufff3\024\ufff3\033" +
    "\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\001\002\000\010" +
    "\004\ufff9\007\014\010\015\001\002\000\004\004\075\001" +
    "\002\000\010\006\uffd0\007\uffd0\010\uffd0\001\002\000\030" +
    "\007\014\010\015\011\077\012\102\013\106\014\104\016" +
    "\103\017\107\020\105\021\100\022\101\001\002\000\006" +
    "\007\014\010\015\001\002\000\006\007\014\010\015\001" +
    "\002\000\006\007\014\010\015\001\002\000\006\007\014" +
    "\010\015\001\002\000\006\007\014\010\015\001\002\000" +
    "\006\007\014\010\015\001\002\000\006\007\014\010\015" +
    "\001\002\000\006\007\014\010\015\001\002\000\006\007" +
    "\014\010\015\001\002\000\020\007\014\010\015\027\053" +
    "\030\063\031\052\032\055\033\057\001\002\000\010\006" +
    "\uffce\007\uffce\010\uffce\001\002\000\020\007\014\010\015" +
    "\016\103\017\107\020\105\021\100\022\101\001\002\000" +
    "\020\007\014\010\015\027\053\030\063\031\052\032\055" +
    "\033\057\001\002\000\006\007\uffc9\010\uffc9\001\002\000" +
    "\020\007\014\010\015\027\053\030\063\031\052\032\055" +
    "\033\057\001\002\000\010\006\uffcd\007\uffcd\010\uffcd\001" +
    "\002\000\020\007\014\010\015\027\053\030\063\031\052" +
    "\032\055\033\057\001\002\000\006\007\uffc8\010\uffc8\001" +
    "\002\000\020\007\014\010\015\027\053\030\063\031\052" +
    "\032\055\033\057\001\002\000\010\006\uffcf\007\uffcf\010" +
    "\uffcf\001\002\000\020\007\014\010\015\027\053\030\063" +
    "\031\052\032\055\033\057\001\002\000\006\007\uffc6\010" +
    "\uffc6\001\002\000\020\007\014\010\015\027\053\030\063" +
    "\031\052\032\055\033\057\001\002\000\010\006\uffcb\007" +
    "\uffcb\010\uffcb\001\002\000\020\007\014\010\015\027\053" +
    "\030\063\031\052\032\055\033\057\001\002\000\010\006" +
    "\uffcc\007\uffcc\010\uffcc\001\002\000\020\007\014\010\015" +
    "\027\053\030\063\031\052\032\055\033\057\001\002\000" +
    "\006\007\uffc7\010\uffc7\001\002\000\010\007\014\010\015" +
    "\015\134\001\002\000\006\007\014\010\015\001\002\000" +
    "\020\007\014\010\015\027\053\030\063\031\052\032\055" +
    "\033\057\001\002\000\010\006\uffd7\007\014\010\015\001" +
    "\002\000\004\006\uffdc\001\002\000\020\007\014\010\015" +
    "\027\053\030\063\031\052\032\055\033\057\001\002\000" +
    "\006\007\014\010\015\001\002\000\010\005\143\007\014" +
    "\010\015\001\002\000\010\006\ufff9\007\014\010\015\001" +
    "\002\000\004\006\145\001\002\000\030\004\uffe2\006\021" +
    "\007\014\010\015\023\ufff3\024\ufff3\033\ufff3\034\ufff3\035" +
    "\ufff3\036\ufff3\037\ufff3\001\002\000\010\004\ufff9\007\014" +
    "\010\015\001\002\000\004\004\150\001\002\000\010\006" +
    "\uffc5\007\uffc5\010\uffc5\001\002\000\010\007\014\010\015" +
    "\025\152\001\002\000\006\007\014\010\015\001\002\000" +
    "\010\005\154\007\014\010\015\001\002\000\010\006\ufff9" +
    "\007\014\010\015\001\002\000\004\006\156\001\002\000" +
    "\030\004\uffe2\006\021\007\014\010\015\023\ufff3\024\ufff3" +
    "\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\001\002\000" +
    "\010\004\ufff9\007\014\010\015\001\002\000\004\004\161" +
    "\001\002\000\010\006\uffc4\007\uffc4\010\uffc4\001\002\000" +
    "\032\002\uffed\006\uffed\007\uffed\010\uffed\023\uffed\024\uffed" +
    "\026\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\001" +
    "\002\000\030\006\ufff5\007\ufff5\010\ufff5\023\ufff5\024\ufff5" +
    "\026\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\001" +
    "\002\000\004\006\165\001\002\000\032\002\uffec\006\uffec" +
    "\007\uffec\010\uffec\023\uffec\024\uffec\026\uffec\033\uffec\034" +
    "\uffec\035\uffec\036\uffec\037\uffec\001\002\000\010\006\ufff9" +
    "\007\014\010\015\001\002\000\006\007\014\010\015\001" +
    "\002\000\010\006\uffea\007\uffea\010\uffea\001\002\000\016" +
    "\007\014\010\015\030\176\031\173\032\174\033\175\001" +
    "\002\000\010\006\ufff9\007\014\010\015\001\002\000\010" +
    "\006\uffe8\007\uffe8\010\uffe8\001\002\000\010\006\uffe6\007" +
    "\uffe6\010\uffe6\001\002\000\010\006\uffe9\007\uffe9\010\uffe9" +
    "\001\002\000\010\006\uffe7\007\uffe7\010\uffe7\001\002\000" +
    "\010\006\uffe5\007\uffe5\010\uffe5\001\002\000\004\006\uffeb" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\030\011\015\012\012\014\010\015\017\030" +
    "\004\031\007\034\006\035\011\036\003\037\005\040\016" +
    "\001\001\000\006\007\167\013\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\053" +
    "\001\001\000\016\012\163\030\004\031\007\034\006\035" +
    "\011\036\003\001\001\000\010\030\004\031\007\034\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\023\006\026\020\027\021\030\023\025" +
    "\024\024\030\004\031\007\034\006\035\011\036\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\002\036\017\045\022\037\025" +
    "\047\027\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\023\006\026\021\032\030\004\031\007\034" +
    "\006\035\011\036\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\030\004" +
    "\031\137\001\001\000\002\001\001\000\012\030\004\031" +
    "\065\032\067\033\136\001\001\000\006\030\004\031\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\030\004\031\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\061\005" +
    "\057\016\055\026\060\030\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\030\004\031\075" +
    "\001\001\000\006\030\004\031\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\053\001\001\000\012" +
    "\030\004\031\065\032\067\033\066\001\001\000\004\030" +
    "\053\001\001\000\002\001\001\000\006\030\004\031\070" +
    "\001\001\000\004\030\053\001\001\000\030\003\023\006" +
    "\026\020\072\021\030\023\025\024\024\030\004\031\007" +
    "\034\006\035\011\036\022\001\001\000\012\030\004\031" +
    "\065\032\067\033\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\053\001\001\000\006\030\004\031" +
    "\130\001\001\000\006\030\004\031\126\001\001\000\006" +
    "\030\004\031\124\001\001\000\006\030\004\031\122\001" +
    "\001\000\006\030\004\031\120\001\001\000\006\030\004" +
    "\031\116\001\001\000\006\030\004\031\114\001\001\000" +
    "\006\030\004\031\112\001\001\000\006\030\004\031\107" +
    "\001\001\000\010\005\110\016\055\030\053\001\001\000" +
    "\006\030\004\031\111\001\001\000\004\030\053\001\001" +
    "\000\010\005\113\016\055\030\053\001\001\000\006\030" +
    "\004\031\111\001\001\000\010\005\115\016\055\030\053" +
    "\001\001\000\006\030\004\031\111\001\001\000\010\005" +
    "\117\016\055\030\053\001\001\000\006\030\004\031\111" +
    "\001\001\000\010\005\121\016\055\030\053\001\001\000" +
    "\006\030\004\031\111\001\001\000\010\005\123\016\055" +
    "\030\053\001\001\000\006\030\004\031\111\001\001\000" +
    "\010\005\125\016\055\030\053\001\001\000\006\030\004" +
    "\031\111\001\001\000\010\005\127\016\055\030\053\001" +
    "\001\000\006\030\004\031\111\001\001\000\010\005\131" +
    "\016\055\030\053\001\001\000\006\030\004\031\111\001" +
    "\001\000\004\030\053\001\001\000\006\030\004\031\134" +
    "\001\001\000\010\005\135\016\055\030\053\001\001\000" +
    "\006\030\004\031\111\001\001\000\002\001\001\000\014" +
    "\004\061\005\057\016\055\026\140\030\053\001\001\000" +
    "\006\030\004\031\141\001\001\000\004\030\053\001\001" +
    "\000\012\030\004\031\065\032\067\033\143\001\001\000" +
    "\002\001\001\000\030\003\023\006\026\020\145\021\030" +
    "\023\025\024\024\030\004\031\007\034\006\035\011\036" +
    "\022\001\001\000\012\030\004\031\065\032\067\033\146" +
    "\001\001\000\002\001\001\000\006\030\004\031\150\001" +
    "\001\000\004\030\053\001\001\000\006\030\004\031\152" +
    "\001\001\000\004\030\053\001\001\000\012\030\004\031" +
    "\065\032\067\033\154\001\001\000\002\001\001\000\030" +
    "\003\023\006\026\020\156\021\030\023\025\024\024\030" +
    "\004\031\007\034\006\035\011\036\022\001\001\000\012" +
    "\030\004\031\065\032\067\033\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\030\004\031" +
    "\065\032\067\033\177\001\001\000\006\030\004\031\170" +
    "\001\001\000\002\001\001\000\006\010\171\030\053\001" +
    "\001\000\012\030\004\031\065\032\067\033\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Taal20Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Taal20Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Taal20Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public boolean syntaxErrors;

    public void syntax_error(Symbol current_token) {
        report_error(
            "Syntax error at line " + (current_token.left+1) + ", column "
            + current_token.right + " (Token: " + Taal20SymbolType.terminalNames[current_token.sym] + ")\n", null
        );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Taal20Parser$actions {
  private final Taal20Parser parser;

  /** Constructor */
  CUP$Taal20Parser$actions(Taal20Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Taal20Parser$do_action_part00000000(
    int                        CUP$Taal20Parser$act_num,
    java_cup.runtime.lr_parser CUP$Taal20Parser$parser,
    java.util.Stack            CUP$Taal20Parser$stack,
    int                        CUP$Taal20Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Taal20Parser$result;

      /* select the action based on the action number */
      switch (CUP$Taal20Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)).right;
		Programma start_val = (Programma)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)).value;
		RESULT = start_val;
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Taal20Parser$parser.done_parsing();
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // space_or_tab ::= SPACE 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("space_or_tab",22, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // space_or_tab ::= TAB 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("space_or_tab",22, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // wit ::= space_or_tab 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("wit",23, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // wit ::= wit space_or_tab 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("wit",23, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // wit_recursive ::= wit 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("wit_recursive",24, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // wit_recursive ::= wit_recursive wit 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("wit_recursive",24, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // wit_recursive_opt ::= wit_recursive 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("wit_recursive_opt",25, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // wit_recursive_opt ::= 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("wit_recursive_opt",25, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // wit_or_newline ::= wit 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("wit_or_newline",26, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // wit_or_newline ::= NEWLINE 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("wit_or_newline",26, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // wit_or_newline_recursive ::= wit_or_newline 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("wit_or_newline_recursive",27, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // wit_or_newline_recursive ::= wit_or_newline_recursive wit_or_newline 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("wit_or_newline_recursive",27, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // wit_or_newline_recursive_opt ::= wit_or_newline_recursive 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("wit_or_newline_recursive_opt",28, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // wit_or_newline_recursive_opt ::= 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("wit_or_newline_recursive_opt",28, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // goal ::= programma 
            {
              Programma RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).right;
		Programma p = (Programma)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("goal",30, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // programma ::= InitBlok ProgrammaBlok 
            {
              Programma RESULT =null;
		int ibleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)).left;
		int ibright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)).right;
		InitBlok ib = (InitBlok)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)).value;
		int pbleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).left;
		int pbright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).right;
		ProgrammaBlok pb = (ProgrammaBlok)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.peek()).value;
		 System.out.println("Parse successful."); RESULT = new Programma(ib, pb); 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("programma",29, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // InitBlok ::= InitStatementsOpt 
            {
              InitBlok RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).right;
		ArrayList<InitStatement> s = (ArrayList<InitStatement>)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.peek()).value;
		 RESULT = new InitBlok(s); 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("InitBlok",7, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // InitStatementsOpt ::= InitStatements 
            {
              ArrayList<InitStatement> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).right;
		ArrayList<InitStatement> sl = (ArrayList<InitStatement>)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.peek()).value;
		 RESULT = sl; 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("InitStatementsOpt",11, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // InitStatementsOpt ::= 
            {
              ArrayList<InitStatement> RESULT =null;
		 RESULT = new ArrayList<InitStatement>(); 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("InitStatementsOpt",11, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // InitStatements ::= InitStatement NEWLINE 
            {
              ArrayList<InitStatement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)).right;
		InitStatement s = (InitStatement)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)).value;
		 RESULT = new ArrayList<InitStatement>(); RESULT.add(s); 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("InitStatements",10, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // InitStatements ::= InitStatements InitStatement NEWLINE 
            {
              ArrayList<InitStatement> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-2)).right;
		ArrayList<InitStatement> sl = (ArrayList<InitStatement>)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)).right;
		InitStatement s = (InitStatement)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)).value;
		 sl.add(s); RESULT = sl; 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("InitStatements",10, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // InitStatement ::= wit_or_newline_recursive_opt InitStatementType wit_recursive_opt 
            {
              InitStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)).right;
		InitStatement s = (InitStatement)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)).value;
		 RESULT = s; 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("InitStatement",8, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // InitStatementType ::= GebruikStatement 
            {
              InitStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).right;
		GebruikStatement s = (GebruikStatement)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("InitStatementType",9, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // GebruikStatementType ::= VARNAME 
            {
              InitConstantType RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.peek()).value;
		 RESULT = new Taal20VarName(n); 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("GebruikStatementType",6, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // GebruikStatementType ::= ZWOOG 
            {
              InitConstantType RESULT =null;
		 RESULT = ZwOogConstant.INSTANCE; 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("GebruikStatementType",6, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // GebruikStatementType ::= KLEUROOG 
            {
              InitConstantType RESULT =null;
		 RESULT = KleurOogConstant.INSTANCE;; 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("GebruikStatementType",6, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // GebruikStatementType ::= KOMPAS 
            {
              InitConstantType RESULT =null;
		 RESULT = KompasConstant.INSTANCE; 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("GebruikStatementType",6, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // GebruikStatement ::= GEBRUIK wit GebruikStatementType wit_recursive_opt 
            {
              GebruikStatement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)).right;
		InitConstantType t = (InitConstantType)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)).value;
		 RESULT = new GebruikStatement(t); 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("GebruikStatement",5, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ProgrammaBlok ::= StatementsOpt 
            {
              ProgrammaBlok RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).right;
		List<ProgrammaStatement> sl = (List<ProgrammaStatement>)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.peek()).value;
		 RESULT = new ProgrammaBlok(sl); 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("ProgrammaBlok",14, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // StatementsOpt ::= Statements 
            {
              List<ProgrammaStatement> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).right;
		List<ProgrammaStatement> sl = (List<ProgrammaStatement>)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.peek()).value;
		 RESULT = sl; 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("StatementsOpt",18, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // StatementsOpt ::= 
            {
              List<ProgrammaStatement> RESULT =null;
		 RESULT = new ArrayList<ProgrammaStatement>(); 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("StatementsOpt",18, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Statements ::= Statement NEWLINE 
            {
              List<ProgrammaStatement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)).right;
		ProgrammaStatement s = (ProgrammaStatement)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)).value;
		 RESULT = new ArrayList<ProgrammaStatement>(); RESULT.add(s); 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("Statements",17, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Statements ::= Statements Statement NEWLINE 
            {
              List<ProgrammaStatement> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-2)).right;
		List<ProgrammaStatement> sl = (List<ProgrammaStatement>)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)).right;
		ProgrammaStatement s = (ProgrammaStatement)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)).value;
		 sl.add(s); RESULT = sl; 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("Statements",17, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Statement ::= EmptyStatement 
            {
              ProgrammaStatement RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("Statement",15, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Statement ::= FullStatement 
            {
              ProgrammaStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).right;
		ProgrammaStatement s = (ProgrammaStatement)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.peek()).value;
		 RESULT = s ; 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("Statement",15, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EmptyStatement ::= wit_or_newline_recursive_opt 
            {
              Object RESULT =null;

              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("EmptyStatement",1, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FullStatement ::= wit_or_newline_recursive_opt StatementType wit_recursive_opt 
            {
              ProgrammaStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)).right;
		ProgrammaStatement s = (ProgrammaStatement)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-1)).value;
		 RESULT = s; 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("FullStatement",4, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // StatementType ::= ZolangStatement 
            {
              ProgrammaStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).right;
		ZolangStatement s = (ZolangStatement)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("StatementType",16, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // StatementType ::= ToekenningStatement 
            {
              ProgrammaStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).right;
		ToekenningStatement s = (ToekenningStatement)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("StatementType",16, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // StatementType ::= OpdrachtStatement 
            {
              ProgrammaStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).right;
		OpdrachtStatement s = (OpdrachtStatement)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("StatementType",16, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // StatementType ::= AlsStatement 
            {
              ProgrammaStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).right;
		IAlsStatement s = (IAlsStatement)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("StatementType",16, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ToekenningStatement ::= VARNAME wit EQ wit Expressie 
            {
              ToekenningStatement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).right;
		Expressie e = (Expressie)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.peek()).value;
		 RESULT = new ToekenningStatement(new Taal20VarName(n), e); 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("ToekenningStatement",19, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expressie ::= INT 
            {
              Expressie RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.peek()).value;
		 RESULT = new NumberExpressie(new Taal20Int(i)); 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("Expressie",3, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expressie ::= VARNAME 
            {
              Expressie RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.peek()).value;
		 RESULT = new VarNameExpressie(new Taal20VarName(n)); 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("Expressie",3, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expressie ::= MathExpression 
            {
              Expressie RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).right;
		CalcExpressie e = (CalcExpressie)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("Expressie",3, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expressie ::= KLEUROOG 
            {
              Expressie RESULT =null;
		 RESULT = KleurOogExpressie.INSTANCE; 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("Expressie",3, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expressie ::= ZWOOG 
            {
              Expressie RESULT =null;
		 RESULT = ZwOogExpressie.INSTANCE; 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("Expressie",3, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expressie ::= KOMPAS 
            {
              Expressie RESULT =null;
		 RESULT = KompasExpressie.INSTANCE; 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("Expressie",3, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ZolangStatement ::= ZOLANG wit Vergelijking wit LBRACE wit_recursive_opt NEWLINE ProgrammaBlok wit_recursive_opt RBRACE 
            {
              ZolangStatement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-7)).right;
		EqualityExpression v = (EqualityExpression)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-7)).value;
		int pbleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-2)).left;
		int pbright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-2)).right;
		ProgrammaBlok pb = (ProgrammaBlok)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-2)).value;
		 RESULT = new ZolangStatement(v, pb); 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("ZolangStatement",21, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MathExpression ::= Expressie wit PLUS wit Expressie 
            {
              CalcExpressie RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)).right;
		Expressie l = (Expressie)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).right;
		Expressie r = (Expressie)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.peek()).value;
		 RESULT = new CalcExpressie(l, CalcExpressieType.PLUS, r); 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("MathExpression",12, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MathExpression ::= Expressie wit MIN wit Expressie 
            {
              CalcExpressie RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)).right;
		Expressie l = (Expressie)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).right;
		Expressie r = (Expressie)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.peek()).value;
		 RESULT = new CalcExpressie(l, CalcExpressieType.MIN, r); 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("MathExpression",12, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MathExpression ::= Expressie wit TIMES wit Expressie 
            {
              CalcExpressie RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)).right;
		Expressie l = (Expressie)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).right;
		Expressie r = (Expressie)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.peek()).value;
		 RESULT = new CalcExpressie(l, CalcExpressieType.TIMES, r); 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("MathExpression",12, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MathExpression ::= Expressie wit SLASH wit Expressie 
            {
              CalcExpressie RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)).right;
		Expressie l = (Expressie)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).right;
		Expressie r = (Expressie)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.peek()).value;
		 RESULT = new CalcExpressie(l, CalcExpressieType.SLASH, r); 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("MathExpression",12, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // MathExpression ::= Expressie wit PERCENT wit Expressie 
            {
              CalcExpressie RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)).right;
		Expressie l = (Expressie)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).right;
		Expressie r = (Expressie)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.peek()).value;
		 RESULT = new CalcExpressie(l, CalcExpressieType.PERCENT, r); 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("MathExpression",12, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Vergelijking ::= EqualityExpression 
            {
              EqualityExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).right;
		EqualityExpression e = (EqualityExpression)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("Vergelijking",20, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EqualityExpression ::= Expressie wit LT wit Expressie 
            {
              EqualityExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)).right;
		Expressie l = (Expressie)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).right;
		Expressie r = (Expressie)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.peek()).value;
		 RESULT = new EqualityExpression(l, VergelijkingType.LT, r); 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",2, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EqualityExpression ::= Expressie wit GT wit Expressie 
            {
              EqualityExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)).right;
		Expressie l = (Expressie)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).right;
		Expressie r = (Expressie)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.peek()).value;
		 RESULT = new EqualityExpression(l, VergelijkingType.GT, r); 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",2, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EqualityExpression ::= Expressie wit EQEQ wit Expressie 
            {
              EqualityExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)).right;
		Expressie l = (Expressie)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).right;
		Expressie r = (Expressie)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.peek()).value;
		 RESULT = new EqualityExpression(l, VergelijkingType.EQEQ, r); 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",2, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EqualityExpression ::= Expressie wit NOTEQ wit Expressie 
            {
              EqualityExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)).right;
		Expressie l = (Expressie)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()).right;
		Expressie r = (Expressie)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.peek()).value;
		 RESULT = new EqualityExpression(l, VergelijkingType.NOTEQ, r); 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",2, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // AlsStatement ::= ALS wit Vergelijking wit LBRACE wit_recursive_opt NEWLINE ProgrammaBlok wit_recursive_opt RBRACE 
            {
              IAlsStatement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-7)).right;
		EqualityExpression v = (EqualityExpression)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-7)).value;
		int alsleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-2)).left;
		int alsright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-2)).right;
		ProgrammaBlok als = (ProgrammaBlok)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-2)).value;
		 RESULT = new AlsStatement(v, als); 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("AlsStatement",0, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // AlsStatement ::= ALS wit Vergelijking wit LBRACE wit_recursive_opt NEWLINE ProgrammaBlok wit_recursive_opt RBRACE wit ANDERS wit LBRACE wit_recursive_opt NEWLINE ProgrammaBlok wit_recursive_opt RBRACE 
            {
              IAlsStatement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-16)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-16)).right;
		EqualityExpression v = (EqualityExpression)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-16)).value;
		int alsleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-11)).left;
		int alsright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-11)).right;
		ProgrammaBlok als = (ProgrammaBlok)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-11)).value;
		int andersleft = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-2)).left;
		int andersright = ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-2)).right;
		ProgrammaBlok anders = (ProgrammaBlok)((java_cup.runtime.Symbol) CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-2)).value;
		 RESULT = new AlsAndersStatement(v, als, anders); 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("AlsStatement",0, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.elementAt(CUP$Taal20Parser$top-18)), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OpdrachtStatement ::= STAP_VOORUIT 
            {
              OpdrachtStatement RESULT =null;
		 RESULT = new OpdrachtStatement(OpdrachtType.STAP_VOORUIT); 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("OpdrachtStatement",13, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OpdrachtStatement ::= STAP_ACHTERUIT 
            {
              OpdrachtStatement RESULT =null;
		 RESULT = new OpdrachtStatement(OpdrachtType.STAP_ACHTERUIT); 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("OpdrachtStatement",13, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OpdrachtStatement ::= DRAAI_LINKS 
            {
              OpdrachtStatement RESULT =null;
		 RESULT = new OpdrachtStatement(OpdrachtType.DRAAI_LINKS); 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("OpdrachtStatement",13, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OpdrachtStatement ::= DRAAI_RECHTS 
            {
              OpdrachtStatement RESULT =null;
		 RESULT = new OpdrachtStatement(OpdrachtType.DRAAI_RECHTS); 
              CUP$Taal20Parser$result = parser.getSymbolFactory().newSymbol("OpdrachtStatement",13, ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Taal20Parser$stack.peek()), RESULT);
            }
          return CUP$Taal20Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Taal20Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Taal20Parser$do_action(
    int                        CUP$Taal20Parser$act_num,
    java_cup.runtime.lr_parser CUP$Taal20Parser$parser,
    java.util.Stack            CUP$Taal20Parser$stack,
    int                        CUP$Taal20Parser$top)
    throws java.lang.Exception
    {
              return CUP$Taal20Parser$do_action_part00000000(
                               CUP$Taal20Parser$act_num,
                               CUP$Taal20Parser$parser,
                               CUP$Taal20Parser$stack,
                               CUP$Taal20Parser$top);
    }
}

}
